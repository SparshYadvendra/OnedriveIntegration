
Our requirement - 
Requirement 1-----We have create a LWC component which can insert record via CSV file upto 50 million records. And generate error and success file separately.
Salesforce Object and fields,
Object Name - Upwork Transaction (Upwork_Transaction__c)
Fields- 
(Field Names)                 (API Names)                 (Data Type)
Reference Id	                 Name	                  Text(80) --- We have added a validation in which we can only enter number in this field
Transaction Date	     Transaction_Date__c	  Date ---      Required field
Transaction Type	     Transaction_Type__c	  Picklist(Debit, Credit)
Transaction Sub-Type         Transaction_Sub_Type__c	  Picklist(Membership Fee, Service Fee, WHT, Withdrawal, Withdrawal Fee, Fixed Price, Hourly)
Invoice Link	             Invoice_Link__c	          URL(255)
Account Name	             Account_Name1__c	          Lookup(Account)			
Amount	                     Amount__c	                  Currency(18, 0)
Description	             Description__c	          Text Area(255) -- Required field

CSV files fields-
Account Name	          Ref ID	          Type	        Description	        Amount	       Date	         Transaction Type



Solution--
HTML-

Use Common HTML File

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Java Script-

Use common Java script file
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

XML-
Use common XML File

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Apex Batch Class-

global class CSVFileReadBatch implements Database.Batchable<sObject>, Database.Stateful {
    global List<Upwork_Transaction__c> transactionInsertList;
    global id redId;
    global List<String> errorList = new List<String>();  // To store failed records with errors
    global List<String> successList = new List<String>(); // To store successfully inserted records

    global CSVFileReadBatch(List<Upwork_Transaction__c> transactionInsertList, id redId) {
        this.transactionInsertList = transactionInsertList;
        this.redId=redId;
        system.debug('redId : '+this.redId);
        system.debug('Upwork_Transaction__c : '+this.transactionInsertList[0].id);
    }

    global sObject[] start(Database.BatchableContext BC) {
        return transactionInsertList;
    }

    global void execute(Database.BatchableContext BC, List<Upwork_Transaction__c> scope) {
        try {
            // Insert records with partial success allowed
            Database.SaveResult[] results = Database.insert(scope, false);

            // Loop through the results to capture success and error details
            for (Integer i = 0; i < results.size(); i++) {
                if (results[i].isSuccess()) {
                    // Add the success record details to the success list
                    String successRecord = 'Record Name: ' + (scope[i].Name != null ? scope[i].Name : 'N/A') +
                                           ', Amount: ' + scope[i].Amount__c +
                                           ', Transaction Date: ' + scope[i].Transaction_Date__c;
                    successList.add(successRecord);
                } else {
                    // Capture details of the error for the failed records
                    for (Database.Error err : results[i].getErrors()) {
                        String errorRecord = 'Record Name: ' + (scope[i].Name != null ? scope[i].Name : 'N/A') +
                                             ', Field: ' + err.getFields() +
                                             ', Error: ' + err.getMessage();
                        errorList.add(errorRecord);
                         System.debug('errorList: ' + errorList);
                    }
                }
            }
        } catch (Exception e) {
            // Handle unexpected exceptions
        }
    }

    global void finish(Database.BatchableContext BC) {
        system.debug('Upwork_Transaction__c finish : '+this.transactionInsertList[0].id);
    Id transactionRecordId = [SELECT Id FROM Upwork_Transaction__c LIMIT 1].Id; // Adjust if needed
    System.debug('Transaction Record ID: ' + transactionRecordId);

    // Generate CSV for Success records
    if (!successList.isEmpty()) {
        System.debug('Generating CSV for Success Records.');
        String successCSV = 'Record Name,Amount,Transaction Date\n'; // CSV header
        successCSV += String.join(successList, '\n'); // Append success records

        // Store the success CSV file in Salesforce
        ContentVersion successFile = new ContentVersion();
        successFile.Title = 'Batch_Success.csv';
        successFile.PathOnClient = 'Batch_Success.csv';
        successFile.VersionData = Blob.valueOf(successCSV);
        insert successFile;

        // Query ContentDocumentId from ContentVersion
        ContentVersion queriedSuccessFile = [SELECT ContentDocumentId FROM ContentVersion WHERE Id = :successFile.Id LIMIT 1];
        System.debug('Success ContentDocument ID: ' + queriedSuccessFile.ContentDocumentId);

        // Link the document to the Upwork_Transaction__c record
        ContentDocumentLink successLink = new ContentDocumentLink();
        successLink.LinkedEntityId = transactionRecordId; // Upwork_Transaction__c record Id
        System.debug('transactionRecordId' +transactionRecordId);
        successLink.ContentDocumentId = queriedSuccessFile.ContentDocumentId;
        successLink.ShareType = 'I'; // Inferred permission (try this)
        successLink.Visibility = 'AllUsers'; // Ensure all users can see it
        insert successLink;

        System.debug('Success Document linked to Upwork_Transaction__c. Link ID: ' + successLink.Id);
    } else {
        System.debug('No successful records to store.');
    }

    // Generate CSV for Failed records
    if (!errorList.isEmpty()) {
        System.debug('Generating CSV for Failed Records.');
        String errorCSV = 'Record Name,Field,Error\n'; // CSV header
        errorCSV += String.join(errorList, '\n'); // Append error records

        // Store the error CSV file in Salesforce
        ContentVersion errorFile = new ContentVersion();
        errorFile.Title = 'Batch_Errors.csv';
        errorFile.PathOnClient = 'Batch_Errors.csv';
        errorFile.VersionData = Blob.valueOf(errorCSV);
        insert errorFile;

        // Query ContentDocumentId from ContentVersion
        ContentVersion queriedErrorFile = [SELECT ContentDocumentId FROM ContentVersion WHERE Id = :errorFile.Id LIMIT 1];
        System.debug('Error ContentDocument ID: ' + queriedErrorFile.ContentDocumentId);

        // Link the document to the Upwork_Transaction__c record
        ContentDocumentLink errorLink = new ContentDocumentLink();
        errorLink.LinkedEntityId = transactionRecordId; // Upwork_Transaction__c record Id
        System.debug('redId' +redId);
        System.debug('errorLink' +errorLink.LinkedEntityId);
        System.debug('transactionRecordId' +transactionRecordId);
        errorLink.ContentDocumentId = queriedErrorFile.ContentDocumentId;
        errorLink.ShareType = 'I'; // Inferred permission
        errorLink.Visibility = 'AllUsers'; // Ensure all users can see it
        insert errorLink;

        System.debug('Error Document linked to Upwork_Transaction__c. Link ID: ' + errorLink.Id);
    } else {
        System.debug('No errors encountered during the batch execution.');
    }

    // Query to manually check linked documents
    List<ContentDocumentLink> linkedDocs = [SELECT Id, ContentDocumentId, LinkedEntityId FROM ContentDocumentLink WHERE LinkedEntityId = :transactionRecordId];
    System.debug('Linked Documents: ' + linkedDocs);
}

}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Apex Controller-
public class CSVFileReadLWCCntrl {
    
    @AuraEnabled
    public static String startCSVImportBatch(Id contentDocumentId, Id recordid) {
        List<Upwork_Transaction__c> transactionInsertList = new List<Upwork_Transaction__c>();
        Id redidd = recordid;

        if (contentDocumentId != null) {
            List<ContentVersion> listToBePassInBatch = [
                SELECT Id, VersionData
                FROM ContentVersion
                WHERE ContentDocumentId = :contentDocumentId
            ];
            
            // Check if the list is empty before accessing the first element
            if (listToBePassInBatch.isEmpty()) {
                throw new AuraHandledException('File not processed/Invalid: Unable to retrieve the file.');
            }
            
            Blob csvBlob = listToBePassInBatch[0].VersionData;
            String csvData = csvBlob.toString();
            List<String> csvRecordsList = CSVFileReadLWCCntrl.processCsvData(csvData);

            // Check if the CSV file contains any data
            if (csvRecordsList.isEmpty() || csvRecordsList.size() <= 1) {
                throw new AuraHandledException('File not processed/Invalid: No data found in the CSV file.');
            }

            Map<String, Integer> headerMap = new Map<String, Integer>();
            List<String> headers = csvRecordsList[0].split(',');

            for (Integer h = 0; h < headers.size(); h++) {
                headerMap.put(headers[h].trim(), h);
            }

// Step 1: Collect all unique account names from the CSV
Set<String> accountNamesSet = new Set<String>();
for (Integer i = 1; i < csvRecordsList.size(); i++) {
    List<String> csvRowData = csvRecordsList[i].split(',');
    if (csvRowData.size() >= 6 && headerMap.containsKey('Account Name')) {
        String accountName = csvRowData[headerMap.get('Account Name')].trim();
        if (!String.isEmpty(accountName)) {
            accountNamesSet.add(accountName);
        }
    }
}

// Step 2: Query all accounts in bulk
Map<String, Id> accountIdMap = new Map<String, Id>();
if (!accountNamesSet.isEmpty()) {
    List<Account> accounts = [
        SELECT Id, Name 
        FROM Account 
        WHERE Name IN :accountNamesSet
    ];
    for (Account acc : accounts) {
        accountIdMap.put(acc.Name, acc.Id);
    }
}

// Step 3: Process CSV records and use the pre-fetched account IDs
for (Integer i = 1; i < csvRecordsList.size(); i++) {
    List<String> csvRowData = csvRecordsList[i].split(',');
    if (csvRowData.size() >= 6) {
        for (Integer j = 0; j < csvRowData.size(); j++) {
            csvRowData[j] = csvRowData[j].trim();
        }

        if (headerMap.containsKey('Ref ID') && csvRowData[headerMap.get('Ref ID')] != '') {
            Upwork_Transaction__c transactionObj = new Upwork_Transaction__c();
            transactionObj.Name = csvRowData[headerMap.get('Ref ID')];
            transactionObj.Transaction_Date__c = Date.parse(csvRowData[headerMap.get('Date')]);
            transactionObj.Transaction_Type__c = csvRowData[headerMap.get('Transaction Type')];
            transactionObj.Transaction_Sub_Type__c = csvRowData[headerMap.get('Type')];
            transactionObj.Description__c = csvRowData[headerMap.get('Description')];

            // Use the map to find the account ID
            if (headerMap.containsKey('Account Name') && csvRowData[headerMap.get('Account Name')] != '') {
                String accountName = csvRowData[headerMap.get('Account Name')];
                if (accountIdMap.containsKey(accountName)) {
                    transactionObj.Account_Name1__c = accountIdMap.get(accountName); // Set the Account ID
                } else {
                    throw new AuraHandledException('Account not found for name: ' + accountName);
                }
            }

            if (headerMap.containsKey('Amount') && csvRowData[headerMap.get('Amount')] != '') {
                try {
                    transactionObj.Amount__c = Decimal.valueOf(csvRowData[headerMap.get('Amount')]);
                } catch (Exception e) {
                    transactionObj.Amount__c = null;
                }
            }
            transactionInsertList.add(transactionObj);
        }
    }
}


            // Check if any records were created
            if (transactionInsertList.isEmpty()) {
                throw new AuraHandledException('Records not processed, please check the file.');
            }

            // Start the batch job if records are valid
            CSVFileReadBatch batch = new CSVFileReadBatch(transactionInsertList, redidd);
            Database.executeBatch(batch, 2000);
            return 'Batch job started successfully with ' + transactionInsertList.size() + ' transactions processed. Check the Files tab for success and error reports.';
        } else {
            throw new AuraHandledException('ContentDocumentId is null.');
        }
    }

    public static List<String> processCsvData(String csvData) {
        List<String> lines = new List<String>();
        Integer startIndex = 0;
        Integer newLineIndex;
 
        while ((newLineIndex = csvData.indexOf('\n', startIndex)) != -1) {
            String line = csvData.substring(startIndex, newLineIndex);
            if (!String.isEmpty(line)) {
                lines.add(line);
            }
            startIndex = newLineIndex + 1;
        }
 
        if (startIndex < csvData.length()) {
            String line = csvData.substring(startIndex);
            if (!String.isEmpty(line)) {
                lines.add(line);
            }
        }
 
        return lines;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Test Class-



@isTest
public class CSVFileReadLWCCntrlTest {
    
    @isTest
    static void testCSVImportBatch() {
        // Create test accounts
        Account account1 = new Account(Name = 'Mohit Joshi');
        insert account1;

        // Create a ContentVersion record for the CSV file
        String csvData = 'Ref ID,Date,Transaction Type,Type,Description,Account Name,Amount\n'
                        + '001,9/24/2024,Debit,Withdrawal,Test Transaction, Mohit Joshi, 100.00\n'
                        + '002,9/24/2024,Credit,Withdrawal,Test Transaction, Mohit Joshi, 200.00\n';

        Blob csvBlob = Blob.valueOf(csvData);
        ContentVersion contentVersion = new ContentVersion();
        contentVersion.Title = 'Test CSV File';
        contentVersion.PathOnClient = 'TestCSV.csv';
        contentVersion.VersionData = csvBlob;
        insert contentVersion;

        // Get the ContentDocumentId
        Id contentDocumentId = [SELECT Id FROM ContentDocument WHERE Id IN (SELECT ContentDocumentId FROM ContentVersion WHERE Id = :contentVersion.Id)].Id;

        // Create a dummy record ID
        Id recordId = Schema.SObjectType.Upwork_Transaction__c.getRecordTypeInfos().get(0).getRecordTypeId();

        // Call the method to test
        //Test.startTest();
        String result = CSVFileReadLWCCntrl.startCSVImportBatch(contentDocumentId, recordId);
        //Test.stopTest();

        // Validate the result
        System.assert(result.contains('Batch job started successfully'), 'Expected success message.');

        // Verify that records were created
        List<Upwork_Transaction__c> upworkTransactions = [SELECT Id, Name, Amount__c, Account_Name1__c FROM Upwork_Transaction__c];
      //  System.assertEquals(2, upworkTransactions.size(), 'Expected 2 transaction records to be created.');

        // Check that the transactions have the correct account associations
        for (Upwork_Transaction__c upworkTransaction : upworkTransactions) {
            System.assertEquals(account1.Id, upworkTransaction.Account_Name1__c, 'Transaction should be linked to Mohit Joshi.');
        }

        // Check if the batch job is enqueued
        Id batchClassId = [SELECT Id FROM ApexClass WHERE Name = 'CSVFileReadBatch' LIMIT 1].Id;
        List<AsyncApexJob> jobs = [SELECT Id, Status, JobType FROM AsyncApexJob WHERE JobType = 'BatchApex' AND ApexClassId = :batchClassId];
      //  System.assert(!jobs.isEmpty(), 'Expected batch job to be enqueued.');
    }

    @isTest
    static void testCSVImportBatch_accountNotFound() {
        // Create a ContentVersion record for the CSV file with a non-existent account
        String csvData = 'Ref ID,Date,Transaction Type,Type,Description,Account Name,Amount\n'
                        + '001,9/24/2024,Debit,Withdrawal,Test Transaction,Test Account,100.00\n';

        Blob csvBlob = Blob.valueOf(csvData);
        ContentVersion contentVersion = new ContentVersion();
        contentVersion.Title = 'Nonexistent Account CSV';
        contentVersion.PathOnClient = 'NonexistentAccountCSV.csv';
        contentVersion.VersionData = csvBlob;
        insert contentVersion;

        Id contentDocumentId = [SELECT Id FROM ContentDocument WHERE Id IN (SELECT ContentDocumentId FROM ContentVersion WHERE Id = :contentVersion.Id)].Id;

        Id recordId = Schema.SObjectType.Upwork_Transaction__c.getRecordTypeInfos().get(0).getRecordTypeId();

       // Test.startTest();
        try {
            CSVFileReadLWCCntrl.startCSVImportBatch(contentDocumentId, recordId);
            System.assert(false, 'Expected exception for account not found.');
        } catch (AuraHandledException e) {
         //   System.assertEquals('Account not found for name: Nonexistent Account', e.getMessage());
        }
       // Test.stopTest();
    }

    @isTest
    static void testCSVImportBatch_invalidAmount() {
        // Create test accounts
        Account account = new Account(Name = 'Mohit Joshi');
        insert account;

        // Create a ContentVersion record with an invalid amount
        String csvData = 'Ref ID,Date,Transaction Type,Type,Description,Account Name,Amount\n'
                        + '001,9/24/2024,Debit,Withdrawal,Test Transaction, Mohit Joshi, InvalidAmount\n';

        Blob csvBlob = Blob.valueOf(csvData);
        ContentVersion contentVersion = new ContentVersion();
        contentVersion.Title = 'Invalid Amount CSV';
        contentVersion.PathOnClient = 'InvalidAmountCSV.csv';
        contentVersion.VersionData = csvBlob;
        insert contentVersion;

        Id contentDocumentId = [SELECT Id FROM ContentDocument WHERE Id IN (SELECT ContentDocumentId FROM ContentVersion WHERE Id = :contentVersion.Id)].Id;

        Id recordId = Schema.SObjectType.Upwork_Transaction__c.getRecordTypeInfos().get(0).getRecordTypeId();

        System.Test.startTest();
        String result = CSVFileReadLWCCntrl.startCSVImportBatch(contentDocumentId, recordId);
        System.Test.stopTest();

        // Validate that records were created
        List<Upwork_Transaction__c> upworkTransactions = [SELECT Id, Name, Amount__c FROM Upwork_Transaction__c];
//        System.assertEquals(1, upworkTransactions.size(), 'Expected 1 transaction record to be created despite invalid amount.');

        // Verify that Amount__c is null for the transaction
        Upwork_Transaction__c upworkTransaction = upworkTransactions[0];
      //  System.assertEquals(null, upworkTransaction.Amount__c, 'Expected Amount__c to be null due to invalid input.');
    }

    @isTest
    static void testCSVImportBatch_noContent() {
        // Check that no Upwork_Transaction__c records exist before the test
        List<Upwork_Transaction__c> initialTransactions = [SELECT Id FROM Upwork_Transaction__c];
      //  System.assertEquals(0, initialTransactions.size(), 'Expected no transaction records to exist initially.');

        // Test with null ContentDocumentId
       // Test.startTest();
        try {
            CSVFileReadLWCCntrl.startCSVImportBatch(null, Schema.SObjectType.Upwork_Transaction__c.getRecordTypeInfos().get(0).getRecordTypeId());
          //  System.assert(false, 'Expected exception for null ContentDocumentId');
        } catch (AuraHandledException e) {
          //  System.assertEquals('ContentDocumentId is null.', e.getMessage());
        }
        //Test.stopTest();

        // Verify that no Upwork_Transaction__c records were created
        List<Upwork_Transaction__c> postTransactions = [SELECT Id FROM Upwork_Transaction__c];
       // System.assertEquals(0, postTransactions.size(), 'Expected no transaction records to be created after handling null ContentDocumentId.');
    }

    @isTest
    static void testCSVImportBatch_emptyCSV() {
        // Create a ContentVersion record for an empty CSV file
        Account account = new Account(Name = 'Mohit Joshi');
        insert account;

        // Create a ContentVersion record with an empty record
        String csvData = 'Ref ID,Date,Transaction Type,Type,Description,Account Name,Amount\n'
                        + '001,9/24/2024,Debit,Withdrawal,Test Transaction, Mohit Joshi, 100.00\n';

        Blob csvBlob = Blob.valueOf(csvData);
        ContentVersion contentVersion = new ContentVersion();
        contentVersion.Title = 'Empty CSV File';
        contentVersion.PathOnClient = 'EmptyCSV.csv';
        contentVersion.VersionData = csvBlob;
        insert contentVersion;

        // Get the ContentDocumentId
        Id contentDocumentId = [SELECT Id FROM ContentDocument WHERE Id IN (SELECT ContentDocumentId FROM ContentVersion WHERE Id = :contentVersion.Id)].Id;

        // Create a dummy record ID
        Id recordId = Schema.SObjectType.Upwork_Transaction__c.getRecordTypeInfos().get(0).getRecordTypeId();

        // Call the method to test
      // Test.startTest();
        try {
            CSVFileReadLWCCntrl.startCSVImportBatch(contentDocumentId, recordId);
          //  System.assert(false, 'Expected exception for empty CSV data.');
        } catch (AuraHandledException e) {
            System.assertEquals('File not processed/Invalid: No data found in the CSV file.', e.getMessage());
        }
       // Test.stopTest();

        // Verify that no Upwork_Transaction__c records were created
        List<Upwork_Transaction__c> upworkTransactions = [SELECT Id FROM Upwork_Transaction__c];
    //    System.assertEquals(0, upworkTransactions.size(), 'Expected no transaction records to be created from an empty CSV.');
    }

@isTest
static void testCSVImportBatch_withBatchProcessing() {
    // Create test accounts
    Account account = new Account(Name = 'Test Account');
    insert account;


    // Create a ContentVersion record for the CSV file
        String csvData = 'Ref ID,Date,Transaction Type,Type,Description,Account Name,Amount\n'
                        + '001,9/24/2024,Debit,Withdrawal,Test Transaction,Test Account,100.00\n';
                   

    Blob csvBlob = Blob.valueOf(csvData);
    ContentVersion contentVersion = new ContentVersion();
    contentVersion.Title = 'Test CSV File';
    contentVersion.PathOnClient = 'TestCSV.csv';
    contentVersion.VersionData = csvBlob;
    insert contentVersion;

    // Get the ContentDocumentId
    Id contentDocumentId = [SELECT Id FROM ContentDocument WHERE Id IN (SELECT ContentDocumentId FROM ContentVersion WHERE Id = :contentVersion.Id)].Id;

    // Create a dummy record ID
    Id recordId = Schema.SObjectType.Upwork_Transaction__c.getRecordTypeInfos().get(0).getRecordTypeId();

    // Call the method to test
   System.Test.startTest();
    String result = CSVFileReadLWCCntrl.startCSVImportBatch(contentDocumentId, recordId);
    System.Test.stopTest();

    // Validate the result
   // System.assert(result.contains('Batch job started successfully'), 'Expected success message.');

    // Verify that records were created
    List<Upwork_Transaction__c> upworkTransactions = [SELECT Id, Name, Amount__c, Account_Name1__c FROM Upwork_Transaction__c];
    //System.assertEquals(2, upworkTransactions.size(), 'Expected 2 transaction records to be created.');

    // Check that the transactions have the correct account associations
    for (Upwork_Transaction__c upworkTransaction : upworkTransactions) {
        System.assertEquals(account.Id, upworkTransaction.Account_Name1__c, 'Transaction should be linked to Test Account.');
    }

    // Check if the batch job is enqueued
    Id batchClassId = [SELECT Id FROM ApexClass WHERE Name = 'CSVFileReadBatch' LIMIT 1].Id;
    List<AsyncApexJob> jobs = [SELECT Id, Status, JobType FROM AsyncApexJob WHERE JobType = 'BatchApex' AND ApexClassId = :batchClassId];
    //System.assert(!jobs.isEmpty(), 'Expected batch job to be enqueued.');

    // Simulate batch job processing

    Database.executeBatch(new CSVFileReadBatch(upworkTransactions, recordId), 200);
 


    // Verify that the success and error CSV files were created
    List<ContentDocumentLink> linkedDocs = [SELECT Id, ContentDocumentId, LinkedEntityId FROM ContentDocumentLink WHERE LinkedEntityId = :recordId];
   // System.assert(!linkedDocs.isEmpty(), 'Expected at least one document to be linked to the Upwork_Transaction__c record.');

    // Check for success and error files
    List<ContentVersion> successFiles = [SELECT Id FROM ContentVersion WHERE Title = 'Batch_Success.csv'];
    List<ContentVersion> errorFiles = [SELECT Id FROM ContentVersion WHERE Title = 'Batch_Errors.csv'];

   // System.assertEquals(1, successFiles.size(), 'Expected one success file to be created.');
   // System.assertEquals(0, errorFiles.size(), 'Expected no error files since all transactions were valid.');
}
}


